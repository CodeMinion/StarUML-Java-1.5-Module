; *** IMPORTANT ***
; This file is used by the Additional Compiler Information feature of the Delphi
; IDE and can be automatically downloaded by customers from within the Delphi.
; The URL for this file should remain as static as possible to avoid breaking
; this feature of the IDE.
; *** IMPORTANT ***
;
; Borland Compiler Message Helper
;
; Last updated: 7/18/2002
;
; This file contains messages in the following format:
;
; <regular-expression>=<message-to-be-displayed>
;
; Where:
;
; <regular expression> is a regular expression that matches one or more compiler generated messages
; <message-to-be-displayed> is the text that will appear in the Message Hints window when a matching compiler message is found
;
; if <message to be displayed> is a URL (ex http://www...) then it will be highlighted in blue and
; double clicking will launch your browser and take you to that URL.
;

[Message File URL]
URL=http://info.borland.com/devsupport/delphi/d7/msginfo70.ini

; The following section contains the translated names of the compiler message sections
; below.  For foreign language versions need to set the values on the righthand side
; to the translated text as used by the compiler for the various message types.
[Section Names]
Hint=Hint
Warning=Warning
Error=Error
Fatal Error=Fatal Error

; The section names for the following sections are language specific.  For
; other languages these names must change to the values that the compiler
; uses for these words in that language.  Additionally, the compiler message text
; must be translated so that the Message Helper will yeild the correct results.
[Hint]
Variable .* declared but never used=It is safe to remove this variable since it is not used anywhere within your code
lower visibility=To fix this hint move the method to the the correct section of your class as indicated in the hint

[Warning]
is specific to a platform=This warning means that the code is not cross platform compatible.  You may turn this warning off by adding the compiler directive {$WARN SYMBOL_PLATFORM OFF} to your source code.  Additionally, if you register Delphi you can get an expert that will disable this warning.
Symbol '.*' is deprecated=Deprecated symbols may not be supported in the future.  Either use an alternative or check the code where this symbol is declared to see if it has been moved to another unit unit or if there is a suggested alternative.
Symbol .MakeObjectInstance. is deprecated=function MakeObjectInstance has been moved to Classes.pas so make sure to include classes in your uses clause if it's not already there.  To get rid of the warning you can change your code to call Classes.MakeObjectInstance
Symbol .FreeObjectInstance. is deprecated=function FreeObjectInstance has been moved to Classes.pas so make sure to include classes in your uses clause if it's not already there.  To get rid of the warning you can change your code to call Classes.FreeObjectInstance
Symbol .AllocateHwnd. is deprecated=function AllocateHwnd has been moved to Classes.pas so make sure to include classes in your uses clause if it's not already there.  To get rid of the warning you can change your code to call Classes.AllocateHwnd
Symbol .DeallocateHwnd. is deprecated=procedure DeallocateHwnd has been moved to Classes.pas so make sure to include classes in your uses clause if it's not already there.  To get rid of the warning you can change your code to call Classes.DeallocateHWnd
Symbol .Added. is deprecated=Method TCollection.Added has been deprecated in favor of TCollection.Notify.  You should change your code to use the Notify method.
Symbol .Deleted. is deprecated=Method TCollection.Deleted has been deprecated in favor of TCollection.Notify.  You should change your code to use the Notify method.
violates subrange bounds=The expression consists of data that cannot be contained within the data type being used.
containing abstract method=You should provide at least a stub implementation of this method to avoid a runtime error should this method be called within your application.
hides virtual method=There is a method declared in the ancestor of this class that has the same name.  In most cases you should either override the existing method or change the name of your method to avoid the conflict.
File not found=Check to ensure the file exists AND is located on your Library Path (Tools|Environment options) or your project's Search Path (Project|Options|Directories and Conditionals)
might not have been initialized=You are attempting to use a local variable prior to it being assigned a value.  This can cause problems because the value could be pointing to garbage.
File not found: '.*\.dcr'=You are missing a resource file that has been included through a {$R *.dcr} directive.
implicitly imported=To resolve this warning add the unit mentioned to your Contains section of your package.
hides virtual method of base type=The ancestor of this class has a method of the same name.  Implementing the method this way will prevent you from being able to call the ancestors version of this method.

[Error]
Undeclared identifier: .TDefaultEditor=If you are working with property editors add DesignIntf and DesignEditors to your uses clause
Undeclared identifier: .TStringProperty=If you are working with property editors add DesignIntf and DesignEditors to your uses clause
Undeclared identifier: .TPageProducer=TPageProducer has moved to unit HTTPProd.  You will need to IFDEF your uses clause to maintain backwards compatiblity.  ($IFDEF VER130} HTTPApp {$ELSE} HTTPProd {$ENDIF}
Declaration of 'ComponentRenamed'=The first method of this parameter is declared as a "const AComponent: TComponent".  You will need to correct your declaration to match the new version (see TIModuleNotifier in EditIntf).
Undeclared identifier: .dsFocus=Check to see if you need to add ImgList to your uses clause.
Undeclared identifier: .dsNormal=Check to see if you need to add ImgList to your uses clause.
Undeclared identifier: .VarArrayOf=Variant support has been moved into the Variants unit therefore you must add 'Variants' to your uses clause.
Undeclared identifier: .VarType=Variant support has been moved into the Variants unit therefore you must add 'Variants' to your uses clause.
Undeclared identifier: .VarAs=Variant support has been moved into the Variants unit therefore you must add 'Variants' to your uses clause.
Undeclared identifier: .VarIs=Variant support has been moved into the Variants unit therefore you must add 'Variants' to your uses clause.
No definition for abstract method=Check the declaration of this method in your class and make sure it's not marked as abstract.
Need imported data reference ($G) to access '.*' from unit '.*'=This could be a problem with dcu caching, try doing a Build All of your package to fix the problem.
Undeclared identifier: 'IFormDesigner'=You need to use IDesigner, for more information check the DesignIntf.pas file included with your install of Delphi

[Fatal Error]
Internal Error=http://codecentral.borland.com/codecentral/ccweb.exe/listing?id=14778
File not found: 'proxies.dcu'=http://community.borland.com/article/0,1410,27717,00.html
.*File not found=Check to see that the file is located on your Library path
dsgnintf.dcu=This unit has been superceeded by DesignIntf.dcu
File not found: 'System.pas'=There is a problem with your Library path.  Select Tools|Environment Options and look at the Library tab to ensure your Library path is set correctly, if so, make sure System.dcu is on your Library path.